The algorithm works as follows. When a process wants to access a shared re-
source, it builds a message containing the name of the resource, its process num-
ber, and the current (logical) time. It then sends the message to all other proc-
esses, conceptually including itself. The sending of messages is assumed to be
reliable; that is, no message is lost.
When a process receives a request message from another process, the action it
takes depends on its own state with respect to the resource named in the message.
Three different cases have to be clearly distinguished:

1. If the receiver is not accessing the resource and does not want to ac-
cess it, it sends back an OK message to the sender.

2. If the receiver already has access to the resource, it simply does not
reply. Instead, it queues the request.

3. If the receiver wants to access the resource as well but has not yet
done so, it compares the timestamp of the incoming message with me.
one contained in the message that it has sent everyone. The lowest
one wins. If the incoming message has a lower timestamp, the re-
ceiver sends back an OK message. If its own message has a lower
timestamp, the receiver queues the incoming request and sends noth-
ing.

After sending out requests asking permission, a process sits back and waits
until everyone else has given permission. As soon as all the permissions are in, it
may go ahead. When it is finished, it sends OK messages to all processes on its
queue and deletes them all from the queue.


